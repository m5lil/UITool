/*
  For:
  Author:
  Date:
*/
/*!
Project Name
*/
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
/* line 9, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
/* line 19, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
/* line 33, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
/* line 54, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
/* line 67, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
/* line 77, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
/* line 89, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
/* line 98, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
/* line 110, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
/* line 118, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
/* line 127, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
/* line 136, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
/* line 145, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
/* line 154, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
/* line 162, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

/* line 170, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
sup {
  top: -0.5em;
}

/* line 174, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
/* line 185, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
/* line 193, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
/* line 204, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
/* line 212, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
/* line 221, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
/* line 229, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
/* line 252, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
/* line 266, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
/* line 277, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
/* line 290, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
/* line 302, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
/* line 311, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
/* line 322, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
/* line 334, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
/* line 346, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
/* line 356, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
/* line 367, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
/* line 376, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
/* line 387, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
/* line 396, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
/* line 405, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
/* line 416, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 421, /home/codzin/Desktop/work/Dakakin/app/src/sass/_normalize.scss */
td,
th {
  padding: 0;
}

/* =======================================================================
Responsive
========================================================================== */
/* =======================================================================
Font-face
========================================================================== */
/* =======================================================================
Variables
========================================================================== */
/* =======================================================================
Grid
========================================================================== */
/* Usage examples
 * @include anime(opacity);
 * @include anime((opacity, padding, margin)); // multiple properties can be passed by wrapping with () brackets
 * @include anime((opacity, padding, margin), 0.5s, ease-in, 0.25s); // you can set duration and timing function
 * @include anime(); // will animate all properties */
/* line 39, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
#breakpoint:before {
  display: block;
  content: "xlarge (default --> 1025px to 1199px)";
}

@media (min-height: 780px) {
  /* line 38, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  #breakpoint {
    color: green;
  }
}

@media (max-width: 1024px) {
  /* line 49, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  #breakpoint:before {
    content: "large --> max-width: 1024px";
  }
}

@media (max-width: 767px) {
  /* line 55, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  #breakpoint:before {
    content: "medium --> max-width: 767px";
  }
}

@media (max-width: 599px) {
  /* line 61, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  #breakpoint:before {
    content: "small --> max-width: 599px";
  }
}

@media (max-width: 479px) {
  /* line 67, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  #breakpoint:before {
    content: "xsmall --> max-width: 479px";
  }
}

@media (min-width: 1200px) {
  /* line 73, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  #breakpoint:before {
    content: "xxl --> min-width: 1200px";
  }
}

/* line 3, /home/codzin/Desktop/work/Dakakin/app/src/sass/_helpers.scss */
.ir {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  background-color: transparent;
}

/* line 3, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_others.scss */
.clearfix:before, .clearfix:after {
  content: ' ';
  display: table;
}

/* line 8, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_others.scss */
.clearfix:after {
  clear: both;
}

/* line 16, /home/codzin/Desktop/work/Dakakin/app/src/sass/_helpers.scss */
.hidden {
  display: none !important;
  visibility: hidden;
}

/* line 22, /home/codzin/Desktop/work/Dakakin/app/src/sass/_helpers.scss */
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/* line 35, /home/codzin/Desktop/work/Dakakin/app/src/sass/_helpers.scss */
.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

/* line 46, /home/codzin/Desktop/work/Dakakin/app/src/sass/_helpers.scss */
.invisible {
  visibility: hidden;
}

/* line 1, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
html,
button,
input,
select,
textarea {
  color: #333;
  font-family: Arial, Verdana, sans-serif;
}

/* line 10, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
body {
  background: #221;
  font-size: 16px;
  line-height: 1.4;
}

/* line 80, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
body:before {
  display: block;
  color: white;
  font-size: 12px;
  position: fixed;
  padding: 0px 7px;
  font-family: Courier, sans-serif;
  bottom: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.3);
  content: "xlarge (default --> 1025px to 1199px)";
}

@media (max-width: 1024px) {
  /* line 98, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  body:before {
    content: "large --> max-width: 1024px";
  }
}

@media (max-width: 767px) {
  /* line 104, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  body:before {
    content: "medium --> max-width: 767px";
  }
}

@media (max-width: 599px) {
  /* line 110, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  body:before {
    content: "small --> max-width: 599px";
  }
}

@media (max-width: 479px) {
  /* line 116, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  body:before {
    content: "xsmall --> max-width: 479px";
  }
}

@media (min-width: 1200px) {
  /* line 122, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_mediaquery.scss */
  body:before {
    content: "xxl --> min-width: 1200px";
  }
}

/* line 17, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
a {
  color: #ff0000;
  text-decoration: none;
}

/* line 20, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
a:visited {
  color: #ff6666;
}

/* line 23, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
a:hover {
  color: #990000;
}

/* line 26, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
a:focus, a:active {
  color: #330000;
}

/* line 34, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
img {
  vertical-align: middle;
  max-width: 100%;
}

/* line 39, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

/* line 48, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/* line 54, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
textarea {
  resize: vertical;
}

/* line 59, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
::-moz-selection {
  background: #ff0000;
  text-shadow: none;
}

/* line 64, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
::-moz-selection {
  background: #ff0000;
  text-shadow: none;
}
::selection {
  background: #ff0000;
  text-shadow: none;
}

/* line 70, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
::-webkit-input-placeholder {
  /* WebKit browsers */
  color: #ff0000;
}

/* line 74, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
:-moz-placeholder {
  /* Mozilla Firefox 4 to 18 */
  color: #ff0000;
}

/* line 78, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
::-moz-placeholder {
  /* Mozilla Firefox 19+ */
  color: #ff0000;
}

/* line 82, /home/codzin/Desktop/work/Dakakin/app/src/sass/_base.scss */
:-ms-input-placeholder {
  /* Internet Explorer 10+ */
  color: #ff0000;
}

/* =======================================================================
Shell
========================================================================== */
/* line 4, /home/codzin/Desktop/work/Dakakin/app/src/sass/_layout.scss */
.container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}

/* line 12, /home/codzin/Desktop/work/Dakakin/app/src/sass/susy/susy/output/support/_clearfix.scss */
.container:after {
  content: " ";
  display: block;
  clear: both;
}

/* line 65, /home/codzin/Desktop/work/Dakakin/app/src/sass/susy/susy/language/susy/_background.scss */
head {
  display: block;
  position: fixed;
  right: 10px;
  top: 10px;
  z-index: 999;
  color: #333;
  background: rgba(255, 255, 255, 0.25);
}

/* line 66, /home/codzin/Desktop/work/Dakakin/app/src/sass/susy/susy/language/susy/_background.scss */
head:before {
  content: "|||";
  display: block;
  padding: 5px 10px;
  font-family: sans-serif;
  font-size: 16px;
  font-weight: bold;
}

/* line 67, /home/codzin/Desktop/work/Dakakin/app/src/sass/susy/susy/language/susy/_background.scss */
head:hover {
  background: rgba(255, 255, 255, 0.5);
  color: red;
}

/* line 71, /home/codzin/Desktop/work/Dakakin/app/src/sass/susy/susy/language/susy/_background.scss */
head:hover ~ .container,
head:hover ~ body .container {
  position: relative;
}

/* line 74, /home/codzin/Desktop/work/Dakakin/app/src/sass/susy/susy/language/susy/_background.scss */
head:hover ~ .container:before,
head:hover ~ body .container:before {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
  background-image: -webkit-linear-gradient(left, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 80%, transparent 80%);
  background-size: 8.4745762712%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top;
}

/* line 8, /home/codzin/Desktop/work/Dakakin/app/src/sass/_layout.scss */
.col1 {
  width: 49.1525423729%;
  float: left;
  margin-right: 1.6949152542%;
}

/* line 12, /home/codzin/Desktop/work/Dakakin/app/src/sass/_layout.scss */
.col2 {
  width: 49.1525423729%;
  float: right;
  margin-right: 0;
}

/* line 3, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_others.scss */
main:before, main:after {
  content: ' ';
  display: table;
}

/* line 8, /home/codzin/Desktop/work/Dakakin/app/src/sass/mixins/_others.scss */
main:after {
  clear: both;
}

/* =======================================================================
Header
========================================================================== */
/* =======================================================================
Footer
========================================================================== */
/* =======================================================================
Nav
========================================================================== */
/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */
@media print {
  /* line 7, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  * {
    background: transparent !important;
    color: #000 !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important;
  }
  /* line 14, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  a,
  a:visited {
    text-decoration: underline;
  }
  /* line 19, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  a[href]:after {
    content: " (" attr(href) ")";
  }
  /* line 23, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  abbr[title]:after {
    content: " (" attr(title) ")";
  }
  /*
   * Don't show links for images, or javascript/internal links
   */
  /* line 31, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  .ir a:after,
  a[href^="javascript:"]:after,
  a[href^="#"]:after {
    content: "";
  }
  /* line 37, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }
  /* line 43, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  thead {
    display: table-header-group;
    /* h5bp.com/t */
  }
  /* line 47, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  tr,
  img {
    page-break-inside: avoid;
  }
  /* line 52, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  img {
    max-width: 100% !important;
  }
  @page {
    margin: 0.5cm;
  }
  /* line 60, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }
  /* line 67, /home/codzin/Desktop/work/Dakakin/app/src/sass/_print.scss */
  h2,
  h3 {
    page-break-after: avoid;
  }
}

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */
